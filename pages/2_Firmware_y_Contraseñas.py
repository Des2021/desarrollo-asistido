# Prop칩sito: P치gina de Streamlit para simular an치lisis de firmware y ataques de contrase침a.
import streamlit as st
import time
import hashlib
from core.fw_sim import create_dummy_firmware, analyze_firmware

st.set_page_config(page_title="Firmware y Contrase침as", page_icon="游댏")
st.title("游댏 An치lisis de Firmware y Ataques de Contrase침a")

tab1, tab2 = st.tabs(["An치lisis de Firmware", "Simulaci칩n de Fuerza Bruta"])

with tab1:
    st.header("An치lisis de Firmware en busca de Secretos")
    st.markdown(
        """
        Muchos dispositivos IoT almacenan secretos (contrase침as, claves API,
        credenciales de WiFi) directamente en el firmware en texto plano.
        Un atacante puede extraer el firmware y analizarlo.
        """
    )
    
    # Generar firmware en el session state
    if "dummy_fw" not in st.session_state:
        st.session_state.dummy_fw = None

    col1, col2 = st.columns(2)
    with col1:
        if st.button("Generar Firmware Vulnerable (Simulado)"):
            st.session_state.dummy_fw = create_dummy_firmware(include_vulnerability=True)
            st.success(f"Firmware simulado generado ({len(st.session_state.dummy_fw)} bytes). Listo para analizar.")
    with col2:
        if st.button("Generar Firmware Seguro (Simulado)"):
            st.session_state.dummy_fw = create_dummy_firmware(include_vulnerability=False)
            st.success(f"Firmware simulado generado ({len(st.session_state.dummy_fw)} bytes). Listo para analizar.")

    if st.session_state.dummy_fw is not None:
        st.info("Firmware cargado en memoria. Haz clic en analizar.")
        
        if st.button("Analizar Firmware Cargado"):
            with st.spinner("Ejecutando 'strings' y 'grep' simulados..."):
                results = analyze_firmware(st.session_state.dummy_fw)
            
            st.subheader("Resultados del An치lisis:")
            st.write(f"Tama침o total: {results['total_size']} bytes")
            
            if results["passwords"]:
                st.error("춰SECRETOS ENCONTRADOS! (Contrase침as)")
                st.json(results["passwords"])
            else:
                st.success("No se encontraron contrase침as hardcodeadas.")
                
            if results["keys"]:
                st.error("춰SECRETOS ENCONTRADOS! (Claves API)")
                st.json(results["keys"])
            else:
                st.success("No se encontraron claves API hardcodeadas.")
            
            if results["ssids"]:
                st.warning("Informaci칩n encontrada (SSIDs)")
                st.json(results["ssids"])

with tab2:
    st.header("Simulaci칩n de Ataque de Fuerza Bruta")
    st.markdown(
        """
        Si un atacante captura un hash de contrase침a (de una base de datos o
        del firmware), puede usar un "diccionario" de contrase침as comunes
        para adivinar la contrase침a original.
        """
    )
    
    # Diccionarios simulados
    wordlists = {
        "Top 10": ["123456", "password", "123456789", "qwerty", "12345678", "111111", "12345", "admin", "123123", "root"],
        "Top 50 (Simulado)": ["123456", "password", "123456789", "qwerty", "12345678", "111111", "12345", "admin", "123123", "root"] + [f"pass{i}" for i in range(40)]
    }
    
    # Contrase침a objetivo y su hash (SHA-256)
    target_password = "admin"
    target_hash = hashlib.sha256(target_password.encode()).hexdigest()
    
    st.info("Simulaci칩n de un hash de contrase침a capturado:")
    st.code(f"Contrase침a Original (Secreta): {target_password}\nHash SHA-256 (Capturado): {target_hash}", language="text")
    
    list_choice = st.selectbox("Seleccionar Diccionario", options=wordlists.keys())
    
    if st.button(f"Iniciar Ataque con '{list_choice}'"):
        wordlist = wordlists[list_choice]
        st.subheader("Log del Ataque:")
        
        progress_bar = st.progress(0)
        log_placeholder = st.empty()
        log_output = ""
        found = False
        
        for i, word in enumerate(wordlist):
            word_hash = hashlib.sha256(word.encode()).hexdigest()
            log_output += f"Probando: '{word}' -> Hash: {word_hash[:10]}...\n"
            
            if word_hash == target_hash:
                log_output += f"\n춰칄XITO! Contrase침a encontrada: '{word}'"
                log_placeholder.code(log_output, language="text")
                st.success(f"Contrase침a encontrada: {word}")
                progress_bar.progress(100)
                found = True
                break
            
            # Actualizar UI
            time.sleep(0.1) # Simular esfuerzo
            progress_val = (i + 1) / len(wordlist)
            progress_bar.progress(progress_val)
            log_placeholder.code(log_output, language="text")
        
        if not found:
            st.error(f"Ataque fallido. La contrase침a no estaba en el diccionario '{list_choice}'.")
